name: Test Nginx

permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test-nginx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "SQL_ROOT_PASSWORD=${{ secrets.SQL_ROOT_PASSWORD }}" >> .env
          echo "FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}" >> .env
          echo "CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}" >> .env

      - name: Generate dummy SSL certs
        run: |
          mkdir -p ./certbot/conf/live/buddiesfinders.hopto.org

          openssl req -x509 -nodes -newkey rsa:2048 -days 1 \
            -keyout ./certbot/conf/live/buddiesfinders.hopto.org/privkey.pem \
            -out ./certbot/conf/live/buddiesfinders.hopto.org/fullchain.pem \
            -subj "/CN=localhost"
      
      - name: Start Docker
        run: docker compose -f docker-compose.yml -f certbot-uitest-override.yml up --build -d

      - name: Wait for Nginx
        run: sleep 5

      - name: Validate Nginx Config
        run: docker compose exec nginx nginx -t

      - name: Test Status Codes
        run: |
          curl -s -o /dev/null -w "%{http_code}" http://localhost | grep 302
          curl -s -o /dev/null -w "%{http_code}" http://localhost/login | grep 200
          curl -s -o /dev/null -w "%{http_code}" http://localhost/nonexistent | grep 404

      - name: Test Security Headers
        run: |
          curl -s -I http://localhost/login | grep "X-Frame-Options: DENY"

      - name: Check Nginx Logs
        run: docker compose logs nginx | grep -i "error" && exit 1 || exit 0

      - name: Stop Docker
        run: docker compose down -v
